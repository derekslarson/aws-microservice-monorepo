"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
const jasmine_1 = __importDefault(require("jasmine"));
const axios_1 = __importDefault(require("axios"));
const core_1 = require("@yac/core");
const e2e_util_1 = require("../../../config/jasmine/e2e.util");
const entityType_enum_1 = require("../src/enums/entityType.enum");
describe("POST /users/{user.id}/teams", () => {
    const environment = process.env.environment;
    const baseUrl = `https://${environment}.yacchat.com/entity-service`;
    let user;
    let accessToken;
    beforeAll(async () => {
        jasmine_1.default.DEFAULT_TIMEOUT_INTERVAL = 15000;
        user = await e2e_util_1.createRandomUser();
        ({ accessToken } = await e2e_util_1.getAccessTokenByEmail(user.email));
    });
    describe("under normal conditions", () => {
        it("returns a valid response", async () => {
            const name = e2e_util_1.generateRandomString(5);
            const body = { name };
            const headers = { Authorization: `Bearer ${accessToken}` };
            try {
                const { status, data } = await axios_1.default.post(`${baseUrl}/users/${user.id}/teams`, body, { headers });
                expect(status).toBe(201);
                expect(data.team).toBeDefined();
                expect(data.team.id).toMatch(/team-.*/);
                expect(data.team.name).toBe(name);
                expect(data.team.createdBy).toBe(user.id);
            }
            catch (error) {
                fail(error);
            }
        });
        it("creates a valid Team entity", async () => {
            const name = e2e_util_1.generateRandomString(5);
            const body = { name };
            const headers = { Authorization: `Bearer ${accessToken}` };
            try {
                const { data } = await axios_1.default.post(`${baseUrl}/users/${user.id}/teams`, body, { headers });
                const getTeamResponse = await e2e_util_1.documentClient.get({
                    TableName: process.env["core-table-name"],
                    Key: { pk: data.team.id, sk: data.team.id },
                }).promise();
                const team = getTeamResponse.Item;
                expect(team).toBeDefined();
                expect(team.entityType).toBe(entityType_enum_1.EntityType.Team);
                expect(team.pk).toBe(data.team.id);
                expect(team.sk).toBe(data.team.id);
                expect(team.id).toBe(data.team.id);
                expect(team.name).toBe(name);
                expect(team.createdBy).toBe(user.id);
            }
            catch (error) {
                fail(error);
            }
        });
        it("creates a valid TeamUserRelationship entity", async () => {
            const name = e2e_util_1.generateRandomString(5);
            const body = { name };
            const headers = { Authorization: `Bearer ${accessToken}` };
            try {
                const { data } = await axios_1.default.post(`${baseUrl}/users/${user.id}/teams`, body, { headers });
                const getTeamUserRelationshipResponse = await e2e_util_1.documentClient.get({
                    TableName: process.env["core-table-name"],
                    Key: { pk: data.team.id, sk: user.id },
                }).promise();
                const teamUserRelationship = getTeamUserRelationshipResponse.Item;
                expect(teamUserRelationship).toBeDefined();
                expect(teamUserRelationship.entityType).toBe(entityType_enum_1.EntityType.TeamUserRelationship);
                expect(teamUserRelationship.pk).toBe(data.team.id);
                expect(teamUserRelationship.sk).toBe(user.id);
                expect(teamUserRelationship.gsi1pk).toBe(user.id);
                expect(teamUserRelationship.gsi1sk).toBe(data.team.id);
                expect(teamUserRelationship.teamId).toBe(data.team.id);
                expect(teamUserRelationship.userId).toBe(user.id);
                expect(teamUserRelationship.role).toBe(core_1.Role.Admin);
            }
            catch (error) {
                fail(error);
            }
        });
    });
    describe("under error conditions", () => {
        describe("when an access token is not passed in the headers", () => {
            it("throws a 401 error", async () => {
                var _a, _b;
                const name = e2e_util_1.generateRandomString(5);
                const body = { name };
                const headers = {};
                try {
                    await axios_1.default.post(`${baseUrl}/users/${user.id}/teams`, body, { headers });
                    fail("Expected an error");
                }
                catch (error) {
                    const axiosError = error;
                    expect((_a = axiosError.response) === null || _a === void 0 ? void 0 : _a.status).toBe(401);
                    expect((_b = axiosError.response) === null || _b === void 0 ? void 0 : _b.statusText).toBe("Unauthorized");
                }
            });
        });
        describe("when passed an invalid user.id in the path", () => {
            it("throws a 400 error with a valid structure", async () => {
                var _a, _b, _c, _d;
                const name = e2e_util_1.generateRandomString(5);
                const body = { name };
                const headers = { Authorization: `Bearer ${accessToken}` };
                try {
                    await axios_1.default.post(`${baseUrl}/users/test/teams`, body, { headers });
                    fail("Expected an error");
                }
                catch (error) {
                    expect((_a = error.response) === null || _a === void 0 ? void 0 : _a.status).toBe(400);
                    expect((_b = error.response) === null || _b === void 0 ? void 0 : _b.statusText).toBe("Bad Request");
                    expect((_c = error.response) === null || _c === void 0 ? void 0 : _c.data.message).toBe("Error validating request");
                    expect((_d = error.response) === null || _d === void 0 ? void 0 : _d.data.validationErrors.pathParameters.userId).toBe("Failed constraint check for string: Must be a user id");
                }
            });
        });
    });
});
//# sourceMappingURL=data:application/json;base64,